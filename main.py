import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
import datetime
import re
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
import but
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import but as kb
import text
from but import main_inline
import smtplib
from email.mime.text import MIMEText
from aiogram import Bot, Dispatcher, types
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# 7131545198

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token='7613826272:AAGSqSR8PTfG5w3yCaV3-6pQH1AjPdKfVy8')
dp = Dispatcher(storage=MemoryStorage())  # –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –¥–æ–¥–∞—Ç–∏ storage

# ID –∞–¥–º—ñ–Ω–∞
ADMIN_CHAT_ID = 892519055


###########textttextexetxetxetxtx

@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("""–¢–≤–æ—è —Å–∏–ª–∞ ‚Äî –Ω–∞—à–∞ –ø–µ—Ä–µ–≤–∞–≥–∞!
–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ –ø–æ–ª–∫—É FENIX. –ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É, –ø–µ—Ä–µ–≥–ª—è–Ω—å –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –∑—Ä–æ–±–∏ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ —Å–ª—É–∂–±–∏ –≤ –æ–¥–Ω–æ–º—É –∑ –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –î–ü–°–£.""",
                         reply_markup=but.main_inline)


@dp.callback_query(F.data == 'vacancies')
async def cmd_heart(callback: CallbackQuery):
    await callback.message.edit_text("–î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –ø–æ—Å–∞–¥—É –º—Ä—ñ—ó, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É",
                                     reply_markup=but.inline)


@dp.callback_query(F.data == 'word_commander')
async def cmd_heart(callback: CallbackQuery):
    await callback.message.edit_text("""–•–æ—á–µ—à—å –±—É—Ç–∏ –∫–æ—Ä–∏—Å–Ω–∏–º –¥–ª—è —Å–≤–æ—î—ó –∫—Ä–∞—ó–Ω–∏? 

–ì–æ—Ç–æ–≤–∏–π —ó—ó –∑–∞—Ö–∏—â–∞—Ç–∏?
–ó–≥–æ–¥–µ–Ω –æ–ø–∞–Ω–æ–≤—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏?
–ü–†–ò–Ñ–î–ù–£–ô–°–Ø –î–û –ù–ê–°!!!

–£–∫—Ä–∞—ó–Ω–∞ —á–µ–∫–∞—î –Ω–∞ —Ç–µ–±–µ

–ö–æ–º–∞–Ω–¥–∏—Ä –ø–æ–ª–∫—É –î–º–∏—Ç—Ä–æ –û–ª–µ–∫—Å—é–∫
–ü–æ–¥–∞—Ç–∏ –∞–Ω–∫–µ—Ç—É –º–æ–∂–Ω–∞ –Ω–∞ —Å–∞–π—Ç—ñ https://fxdpsu.com –∞–±–æ —É –±–æ—Ç—ñ""", reply_markup=but.back)


@dp.callback_query(F.data == 'viz')
async def cmd_heart(callback: CallbackQuery):
    await callback.message.edit_text(text.link, reply_markup=but.back)


@dp.callback_query(F.data == 'about_phoenix')
async def cmd_heart(callback: CallbackQuery):
    await callback.message.edit_text(text.about, parse_mode=ParseMode.HTML, reply_markup=but.back)


@dp.callback_query(F.data == 'perevag')
async def cmd_asd(callback: CallbackQuery):
    await callback.message.edit_text(text.perevag, reply_markup=but.back)


@dp.callback_query(F.data == 'channel')
async def cmd_heart(callback: CallbackQuery):
    await callback.message.edit_text("""–©–æ–± –∑–Ω–∞—Ç–∏ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –±–∞—á–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–Ω–∏—â–µ–Ω–∏—Ö –≤–æ—Ä–æ–∂–∏—Ö —Å–∏–ª, —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª.
–ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://t.me/feniksdpsu""", reply_markup=but.back)


@dp.callback_query(F.data == 'back')
async def cmd_start(callback: CallbackQuery):
    await callback.message.edit_text("""–¢–≤–æ—è —Å–∏–ª–∞ ‚Äî –Ω–∞—à–∞ –ø–µ—Ä–µ–≤–∞–≥–∞!
–í—ñ—Ç–∞—î–º–æ –≤ –±–æ—Ç—ñ –ø–æ–ª–∫—É Phoenix. –ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É, –ø–µ—Ä–µ–≥–ª—è–Ω—å –≤–∞–∫–∞–Ω—Å—ñ—ó —Ç–∞ –∑—Ä–æ–±–∏ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫ –¥–æ —Å–ª—É–∂–±–∏ –≤ –æ–¥–Ω–æ–º—É –∑ –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –î–ü–°–£.""",
                                     reply_markup=but.main_inline)

class RecruitingForm(StatesGroup):
    PIB = State()
    birth = State()
    phone = State()
    city = State()
    posada = State()
    komentar = State()


import smtplib
from email.mime.text import MIMEText

async def send_anketa_email(data):
    smtp_server = "smtp.gmail.com"
    smtp_port = 587
    sender_email = "fenixdpsumail@gmail.com"  # —Ç–≤–æ—è –ø–æ—á—Ç–∞-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    app_password = "pvca hwnj vuye xijg"       # —Ç–≤–æ–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    recipient_email = "prikksrfeniks@gmail.com"    # –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–Ω–∫–µ—Ç—ã

    # –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    subject = "–ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞"
    body = (
        f"üì• –ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ –ü—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è, –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ: {data['PIB']}\n"
        f"üóì –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['birth']}\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {data['phone']}\n"
        f"üèô –ú—ñ—Å—Ç–æ: {data['city']}\n"
        f"üíº –ü–æ—Å–∞–¥–∞: {data['posada']}\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data['komentar']}\n"
    )

    msg = MIMEText(body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = sender_email
    msg["To"] = recipient_email

    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, app_password)
        server.sendmail(sender_email, recipient_email, msg.as_string())
        server.quit()
        print("–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")




@dp.callback_query(F.data == 'anketa')
async def cmd_anketa(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("""üìë –ê–Ω–∫–µ—Ç–∞

–ù–∞–¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üëá""")
    await callback.message.answer("–ü—Ä—ñ–∑–≤–∏—â–µ —ñ–º'—è –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ")
    await state.set_state(RecruitingForm.PIB)





@dp.message(RecruitingForm.PIB)
async def cmd_pib(message: Message, state: FSMContext):
    await state.update_data(PIB=message.text)
    await message.answer("""üóì –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è

‚ÑπÔ∏è —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥-–º–º-—Ä—Ä—Ä—Ä


–ó–í–ï–†–ù–Ü–¢–¨ –£–í–ê–ì–£!!! 
–í–∞–º –º–∞—î –±—É—Ç–∏ 18+ —Ä–æ–∫—ñ–≤ —â–æ–± –¥–∞–ª—ñ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É
–ü—Ä–∏–∫–ª–∞–¥: 12-12-2000""")
    await state.set_state(RecruitingForm.birth)


def is_valid_birthdate(date_text: str) -> bool:
    try:
        birth_date = datetime.datetime.strptime(date_text, "%d-%m-%Y")
        today = datetime.datetime.today()
        age = (today - birth_date).days // 365
        return age >= 18
    except ValueError:
        return False


@dp.message(RecruitingForm.birth)
async def cmd_birth(message: Message, state: FSMContext):
    if not is_valid_birthdate(message.text):
        await message.answer("""–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º 12-12-2000
        –í–∞–º –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 18 —Ä–æ–∫—ñ–≤ —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏""")

        return

    await state.update_data(birth=message.text)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        """üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É

‚ÑπÔ∏è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ +380–•–•–•–•–•–•–•–•–• üëá""",
        reply_markup=kb
    )
    await state.set_state(RecruitingForm.phone)


def is_valid_phone(phone: str) -> bool:
    return re.match(r'^\+?\d{10,15}$', phone)


@dp.message(RecruitingForm.phone)
async def cmd_phone(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç –∞–±–æ —Ç–µ–∫—Å—Ç
    if not is_valid_phone(message.text):
        await message.answer("–£–≤–≤–µ–¥–µ–Ω–∏–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ ")
        return
    phone_number = message.contact.phone_number if message.contact else message.text
    await state.update_data(phone=phone_number)
    await message.answer("üó∫ –ú—ñ—Å—Ç–æ —Ñ–∞–∫—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è\n\n‚ÑπÔ∏è –Ω–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞",
                         reply_markup=ReplyKeyboardRemove())
    await state.set_state(RecruitingForm.city)


@dp.message(RecruitingForm.city)
async def cmd_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("""üìã –ë–∞–∂–∞–Ω–∞ –ø–æ—Å–∞–¥–∞

‚ÑπÔ∏è –æ–±–µ—Ä—ñ—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–æ–∫ üëá""", reply_markup=but.reply_pos)
    await state.set_state(RecruitingForm.posada)


@dp.message(RecruitingForm.posada)
async def cmd_posada(message: Message, state: FSMContext):
    await state.update_data(posada=message.text)
    await message.answer("""üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä

‚ÑπÔ∏è –Ω–∞–ø–∏—à—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä, —è–∫—â–æ –±–∞–∂–∞—î—Ç–µ, –∞–±–æ –ø–æ—Å—Ç–∞–≤—Ç–µ -""", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RecruitingForm.komentar)


@dp.message(RecruitingForm.komentar)
async def cmd_komentar(message: Message, state: FSMContext):
    await state.update_data(komentar=message.text)
    data = await state.get_data()
    await send_anketa_email(data)

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—É –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ—à—Ç—É.")
    await state.clear()

    data = await state.get_data()
    user_data_message = (
        f"üì• –ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ –ü—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è, –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ: {data['PIB']}\n"
        f"üóì –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {data['birth']}\n"
        f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {data['phone']}\n"
        f"üèô –ú—ñ—Å—Ç–æ: {data['city']}\n"
        f"üíº –ü–æ—Å–∞–¥–∞: {data['posada']}\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data['komentar']}\n"
    )

    await message.answer("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à—É –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.", reply_markup=but.main_inline)
    await send_anketa_email(data)  # —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await state.clear()  # –ø–æ—Ç–æ–º —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ





############################################–í–ê–ö–ê–ù–°–ò–ò!!!!!!###################################################################

@dp.callback_query(F.data == '')
async def cmd_heart(callback: CallbackQuery):
    await callback.message.edit_text(text.technik, reply_markup=but.inline)


@dp.callback_query(F.data == 'inzhenerbpla')
async def inzhenerbpla_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.bpla_inj, reply_markup=but.back)


@dp.callback_query(F.data == 'tekhnikbpla')
async def tekhnikbpla_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.technik, reply_markup=but.back)


@dp.callback_query(F.data == 'vodiybpla')
async def vodiybpla_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.vodiy, reply_markup=but.back)


@dp.callback_query(F.data == 'saperbpla')
async def saperbpla_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.saper, reply_markup=but.back)


@dp.callback_query(F.data == 'medyk')
async def medyk_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.medik, reply_markup=but.back)


@dp.callback_query(F.data == 'rebrer')
async def rebrer_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.operator_reb, reply_markup=but.back)


@dp.callback_query(F.data == 'vybuh')
async def vybuh_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.babax_bpla, reply_markup=but.back)


@dp.callback_query(F.data == 'remont')
async def remont_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.fix_bpla, reply_markup=but.back)


@dp.callback_query(F.data == 'dilovod')
async def dilovod_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.dilovod, reply_markup=but.back)


@dp.callback_query(F.data == 'video')
async def video_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.video, reply_markup=but.back)


@dp.callback_query(F.data == 'chergovyy')
async def chergovyy_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.cherg, reply_markup=but.back)


@dp.callback_query(F.data == 'instruktor')
async def instruktor_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.instruct_bpla, reply_markup=but.back)


@dp.callback_query(F.data == 'it')
async def it_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.it, reply_markup=but.back)


@dp.callback_query(F.data == 'radio')
async def radio_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.radio, reply_markup=but.back)


@dp.callback_query(F.data == 'psycholog')
async def psycholog_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.psycho, reply_markup=but.back)


@dp.callback_query(F.data == 'poligrafolog')
async def poligrafolog_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.poligraf, reply_markup=but.back)


@dp.callback_query(F.data == 'smm')
async def smm_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.smm, reply_markup=but.back)


@dp.callback_query(F.data == 'finansyst')
async def finansyst_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.finance, reply_markup=but.back)


@dp.callback_query(F.data == 'zakupivli')
async def zakupivli_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.buy, reply_markup=but.back)


@dp.callback_query(F.data == 'dyzayner')
async def dyzayner_handler(callback: CallbackQuery):
    await callback.message.edit_text(text.graphic, reply_markup=but.back)


@dp.callback_query(F.data == 'back')
async def back_handler(callback: CallbackQuery):
    await callback.message.edit_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=but.main_inline)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤–∏–∫–ª—é—á–µ–Ω–∏–π')